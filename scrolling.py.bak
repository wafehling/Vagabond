#!/usr/bin/python

'''
libtcod python tutorial
This code modifies samples_py.py from libtcod 1.4.1. It shows a '@' 
walking around a scrolling map with a source of light giving simple FOV. 
It's in the public domain.
'''



#############################################
# imports
#############################################

import os

import libtcodpy as libtcod



#############################################
# utility functions
#############################################

def get_key(key):
    if key.vk == libtcod.KEY_CHAR:
        return chr(key.c)
    else:
        return key.vk
    
    
    
#############################################
# global constants and variables
#############################################
map_width = 46
map_height = 31

window_width = 20
window_height = 20

px = 8
py = 10

first = True

fov_recompute = True

fov_map = None
fov_radius = 4

fov_colors =    {
                'dark wall' : libtcod.Color(0, 0, 100),      
                'light wall' : libtcod.Color(130, 110, 50),  
                'dark ground' : libtcod.Color(50, 50, 150),    
                'light ground' : libtcod.Color(200, 180, 50)     
                }
                
do =    {
        'up'    : (0, -1),
        'down'  : (0, 1),
        'right' : (1, 0),
        'left'  : (-1, 0)
        }

keys =  {
        'i' :                   do['up'],
        'k' :                   do['down'],
        'j' :                   do['left'],
        'l' :                   do['right'],
        libtcod.KEY_UP :        do['up'],
        libtcod.KEY_KP8 :       do['up']
        }
		

smap = ['##############################################',
        '#######################      #################',
        '#####################    #     ###############',
        '######################  ###        ###########',
        '##################      #####             ####',
        '################       ########    ###### ####',
        '###############      #################### ####',
        '################    ######                  ##',
        '########   #######  ######   #     #     #  ##',
        '########   ######      ###                  ##',
        '########                                    ##',
        '####       ######      ###   #     #     #  ##',
        '#### ###   ########## ####                  ##',
        '#### ###   ##########   ###########=##########',
        '#### ##################   #####          #####',
        '#### ###             #### #####          #####',
        '####           #     ####                #####',
        '########       #     #### #####          #####',
        '########       #####      ####################',
        '##########   #################################',
        '##########   #################################',
        '###########  #################   #############',
        '############  ###############   ##############',
        '#############   ###########     ##############',
        '###############  #########      ##############',
        '################   ####         ##############',
        '################   ###   #####################',
        '###############   ##   #######################',
        '#############   ###  #########################',
        '#############       ##########################',
        '##############################################',
        ]
        



#############################################
# drawing
#############################################

def draw():
	global px, py, fov_map, first
	global fov_recompute, smap
        

	if first:
                first = False
		libtcod.console_clear(0)
		libtcod.console_set_foreground_color(0, libtcod.white)
		libtcod.console_print_left(0, 1, 1, libtcod.BKGND_NONE, 
				       "IJKL : move around")
		libtcod.console_set_foreground_color(0, libtcod.black)

	

	
        if fov_recompute:
            fov_map = libtcod.map_new(window_width, window_height)
            fov_recompute = False
            yi = 0
            for y in range(py-(window_height/2), py+(window_height/2)+1):
                xi = 0
                for x in range(px-(window_width/2), px+(window_width/2)+1):
                    if 0 <= x < map_width and 0 <= y < map_height:
                        if smap[y][x] == ' ':
                            libtcod.map_set_properties(fov_map, xi, yi, True, True)
                        elif smap[y][x] == '=':
                            libtcod.map_set_properties(fov_map, xi, yi, True, False)
                    xi += 1
                yi += 1
                
        libtcod.console_put_char(0, window_width/2, window_height/2, '@', libtcod.BKGND_NONE)


        libtcod.map_compute_fov(fov_map, window_width/2, window_height/2, fov_radius, True)
   
        yi = 0
        for y in range(py-(window_height/2), py+(window_height/2)+1):
            xi = 0
            for x in range(px-(window_width/2), px+(window_width/2)+1):
                affect, cell = 'dark', 'wall'
                if 0 <= x < map_width and 0 <= y < map_height:
                    if libtcod.map_is_in_fov(fov_map, xi, yi): affect = 'light' 
                    if smap[y][x] == ' ': cell = 'ground'
                    if smap[y][x] == '=': 
                        cell = 'ground'
                        libtcod.console_put_char(0, xi, yi, libtcod.CHAR_DHLINE, libtcod.BKGND_NONE)
                color = fov_colors['%s %s' % (affect, cell)]
                libtcod.console_set_back(0, xi, yi, color, libtcod.BKGND_SET)
                xi += 1
            yi += 1
            

            


#############################################
# game state update
#############################################

def update(key):
    global py, px, fov_recompute, smap
    
    key = get_key(key)
    if key in keys:
            dx, dy = keys[key]	
            if  smap[py+dy][px+dx] == ' ' and \
                0 <= px+dx < map_width and \
                0 <= py+dy < map_height:
                    px = px + dx
                    py = py + dy

                    fov_recompute = True



#############################################
# initialization and main loop
#############################################

font = os.path.join('fonts', 'arial12x12.png')
libtcod.console_set_custom_font(font, libtcod.FONT_LAYOUT_TCOD | libtcod.FONT_TYPE_GREYSCALE)

libtcod.console_init_root(window_width, window_height, 'Python Tutorial', False)


while not libtcod.console_is_window_closed():
    libtcod.console_clear(0)
    draw()
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)
    update(key)
    if key.vk == libtcod.KEY_ESCAPE:
        break
